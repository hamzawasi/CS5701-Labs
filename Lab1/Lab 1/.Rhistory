knitr::opts_chunk$set(echo = TRUE)
int_a <- 4
int_b <- 2
float_a <- 4.2
float_b <- 6.9
int_a+int_b
int_a*int_b
int_a/int_b
int_a%%int_b
int_a^int_b
char_c <- "John"
logic_d <- "FALSE" # logic_d <- F
logic_e <- "TRUE" # logic_e <- T
vector_f <- c(2,2,2,1,4,5,3,2,4,4,3)
int_a * vector_f
seq_x <- seq(1:20)
seq_y <- seq(21:40)
data_frame<-as.data.frame(cbind(seq_x,seq_y)) # this is coercion (http://people.brunel.ac.uk/~csstssd/itr/ItR_1_Objects.html#Coercion)
data_frame
colnames(data_frame) <- c("X","Y")
data_frame
data_frame$x_plus_y <- data_frame$X +data_frame$Y
data_frame
# Can you spot the difference between line 73 and 74?
data_frame$iseven <- ifelse(data_frame$X%%2==0,"TRUE","FALSE")
data_frame$isodd <- ifelse(data_frame$X%%3==0,TRUE,FALSE)
data_frame
add_function <- function(a,b){
a <- a*a
return(a+b)
}
add_function(90,80)
library(ggplot2,gridExtra)
#this line below reads the csv straight into a data frame called worms
worms <- read.csv("data/worms.csv")
#this line below prints the head (or top) of the data frame
head(worms,n=10)
table(worms$Damp, worms$Vegetation)
table(worms$Vegetation)
barplot(table(worms$Vegetation))
barplot(worms$Soil.pH)
hist(worms$Soil.pH)
#head(worms)
ggplot(data=worms)+geom_point(aes(x=Area,y=Soil.pH))
ggplot(worms)+ geom_bar(aes(x=Vegetation), fill="blue")
ggplot(worms)+ geom_bar(aes(x=Vegetation), fill="blue") +
labs(title = "Vegetation from the Worms data") +
scale_y_continuous(name="Frequency", breaks=c(0,5,10)) +
theme_classic()
w1<-table(worms$Vegetation)
w2<-as.data.frame(w1)
#w2
colnames(w2)<-c("Vegetation","Frequency")
ggplot(w2, aes(x="", y=Frequency, fill=Vegetation))+geom_bar(width=1, stat = "identity") +coord_polar("y", start = 0) +labs(title="Pie Chart for the Vegeation from the Worms data")
data_vector <-c(4,7,2,5,6,2)
mean(data_vector)
median(data_vector)
freq.table<-table(data_vector)
freq.table<-as.data.frame(freq.table) # what has happened here?
sorted.freq.table<-freq.table[order(-freq.table$Freq),]
head(sorted.freq.table, n=1)
#Uncomment the line below if you do not have the 'modeest' package
#install.packages("modeest")
library(modeest)
install.packages("modeest")
knitr::opts_chunk$set(echo = TRUE)
int_a <- 4
int_b <- 2
float_a <- 4.2
float_b <- 6.9
int_a+int_b
int_a*int_b
int_a/int_b
int_a%%int_b
int_a^int_b
char_c <- "John"
logic_d <- "FALSE" # logic_d <- F
logic_e <- "TRUE" # logic_e <- T
vector_f <- c(2,2,2,1,4,5,3,2,4,4,3)
int_a * vector_f
seq_x <- seq(1:20)
seq_y <- seq(21:40)
data_frame<-as.data.frame(cbind(seq_x,seq_y)) # this is coercion (http://people.brunel.ac.uk/~csstssd/itr/ItR_1_Objects.html#Coercion)
data_frame
colnames(data_frame) <- c("X","Y")
data_frame
data_frame$x_plus_y <- data_frame$X +data_frame$Y
data_frame
# Can you spot the difference between line 73 and 74?
data_frame$iseven <- ifelse(data_frame$X%%2==0,"TRUE","FALSE")
data_frame$isodd <- ifelse(data_frame$X%%3==0,TRUE,FALSE)
data_frame
add_function <- function(a,b){
a <- a*a
return(a+b)
}
add_function(90,80)
library(ggplot2,gridExtra)
#this line below reads the csv straight into a data frame called worms
worms <- read.csv("data/worms.csv")
#this line below prints the head (or top) of the data frame
head(worms,n=10)
table(worms$Damp, worms$Vegetation)
table(worms$Vegetation)
barplot(table(worms$Vegetation))
barplot(worms$Soil.pH)
hist(worms$Soil.pH)
#head(worms)
ggplot(data=worms)+geom_point(aes(x=Area,y=Soil.pH))
ggplot(worms)+ geom_bar(aes(x=Vegetation), fill="blue")
ggplot(worms)+ geom_bar(aes(x=Vegetation), fill="blue") +
labs(title = "Vegetation from the Worms data") +
scale_y_continuous(name="Frequency", breaks=c(0,5,10)) +
theme_classic()
w1<-table(worms$Vegetation)
w2<-as.data.frame(w1)
#w2
colnames(w2)<-c("Vegetation","Frequency")
ggplot(w2, aes(x="", y=Frequency, fill=Vegetation))+geom_bar(width=1, stat = "identity") +coord_polar("y", start = 0) +labs(title="Pie Chart for the Vegeation from the Worms data")
data_vector <-c(4,7,2,5,6,2)
mean(data_vector)
median(data_vector)
freq.table<-table(data_vector)
freq.table<-as.data.frame(freq.table) # what has happened here?
sorted.freq.table<-freq.table[order(-freq.table$Freq),]
head(sorted.freq.table, n=1)
#Uncomment the line below if you do not have the 'modeest' package
#install.packages("modeest")
library(modeest)
mfv(data_vector,method = "mfv")
grade.point<-c(13,16,12)
credit<-c(15,15,30)
weighted.mean(grade.point, credit)
range(data_vector)
IQR(data_vector)
quantile(data_vector, c(0.25,0.75))
sd(data_vector)
var(data_vector)
summary(data_vector)
summary(worms$Worm.density)
head(sort(worms$Worm.density, decreasing = F))
# use this chunk of code to try
hist(worms$Worm.density,xlab="Density",ylab="Count",main="Distribution of Density")
# histogram worms
ggplot(worms, aes(x=Worm.density)) +
geom_histogram(fill="blue") +
labs(title="Histogram of Worm Density") +
scale_x_continuous(name="Worm Density", breaks = c(0,1,2,3,4,5,6,7,8,9)) +
theme_bw()
#box plot
ggplot(worms, aes(x=Worm.density, y=Damp)) +
geom_boxplot(fill="steelblue2") +
theme_classic() +
labs(title="Box Plot of Worm Density by Damp") +
coord_flip()
View(data_frame)
table(worms$Vegetation)
frequency_vegitation <- table(worms$Vegetation)
barplot(table(worms$Vegetation))
View(add_function)
ggplot(worms)+ geom_bar(aes(x=Vegetation), fill="blue") +
labs(title = "Vegetation from the Worms data") +
scale_y_continuous(name="Frequency", breaks=c(0,5,10)) +
theme_dark()
quantile(data_vector, c(0.25,0.75))
sd(data_vector)
sd(data_vector)
data()
data("diamonds")
data("diamonds")
diamonds <- data("diamonds")
data("diamonds")
force(diamonds)
d <- data("diamonds")
d <- data("diamonds")
d
d <- data(diamonds)
d
library(ggplot2)
data2 <- data(diamonds)
data2 <- data("diamonds")
data("diamonds")
data("diamonds")
library(ggplot2)
data(diamonds)
data("diamonds")
data("diamonds")
data("diamonds")
library(ggplot2)
data("diamonds")
force(diamonds)
a <- data("diamonds")
a <- data("diamonds")
print(a)
diamonds
diamonds
diamonds_data <- diamonds
price_range <- range(diamonds_data$price, na.rm = TRUE)
price_range <- range(diamonds_data$price, na.rm = TRUE)
print(price_range)
price_range <- range(diamonds_data$price, na.rm = TRUE)
print(price_range)
price_carat <- range(diamonds_data$carat, na.rm = TRUE)
print(price_carat)
price_range <- range(diamonds_data$price, na.rm = TRUE)
"Price Range: " print(price_range)
price_range <- range(diamonds_data$price, na.rm = TRUE)
"Price Range: " price_range
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range: ", price_range)
price_carat <- range(diamonds_data$carat, na.rm = TRUE)
print(price_carat)
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range: ", price_range)
carat_range <- range(diamonds_data$carat, na.rm = TRUE)
cat("Carat Range: ", carat_range)
print(price_carat)
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range: ", price_range)
carat_range <- range(diamonds_data$carat, na.rm = TRUE)
cat("Carat Range: ", carat_range)
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range: ", price_range)\
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range: ", price_range)<br>
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range: ", price_range)
carat_range <- range(diamonds_data$carat, na.rm = TRUE)
cat("Carat Range: ", carat_range)
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range: ", price_range)\s
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range: ", price_range)
carat_range <- range(diamonds_data$carat, na.rm = TRUE)
cat("Carat Range: ", carat_range)
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range: ", price_range)
carat_range <- range(diamonds_data$carat, na.rm = TRUE)
cat("Carat Range: ", carat_range)
x_range <- range(diamonds_data$x, na.rm = TRUE)
cat("X Range: ", x_range)
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range: ", price_range, "$")
carat_range <- range(diamonds_data$carat, na.rm = TRUE)
cat("Carat Range: ", carat_range)
x_range <- range(diamonds_data$x, na.rm = TRUE)
cat("X Range: ", x_range)
x_range <- range(diamonds_data$x, na.rm = TRUE)
cat("X Range: ", x_range)
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range:", price_range, "$")
carat_range <- range(diamonds_data$carat, na.rm = TRUE)
cat("Carat Range:", carat_range)
x_range <- range(diamonds_data$x, na.rm = TRUE)
cat("X Range:", x_range, "mm")
y_range <- range(diamonds_data$y, na.rm = TRUE)
cat("Y Range: ", x_range, "mm")
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range:", price_range, "$")
carat_range <- range(diamonds_data$carat, na.rm = TRUE)
cat("Carat Range:", carat_range)
x_range <- range(diamonds_data$x, na.rm = TRUE)
cat("X Range:", x_range, "mm")
y_range <- range(diamonds_data$y, na.rm = TRUE)
#Suggested value for Y is:
cat("Y Range: ", x_range, "mm")
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range:", price_range, "$")
carat_range <- range(diamonds_data$carat, na.rm = TRUE)
cat("Carat Range:", carat_range)
x_range <- range(diamonds_data$x, na.rm = TRUE)
cat("X Range:", x_range, "mm")
y_range <- range(diamonds_data$y, na.rm = TRUE)
#Suggested value for Y is:
cat("Y Range: ", x_range, "mm")
z_range <- range(diamonds_data$z, na.rm = TRUE)
cat("Z Range:", z_range, "mm")
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range:", price_range, "$")
carat_range <- range(diamonds_data$carat, na.rm = TRUE)
cat("Carat Range:", carat_range)
x_range <- range(diamonds_data$x, na.rm = TRUE)
cat("X Range:", x_range, "mm")
y_range <- range(diamonds_data$y, na.rm = TRUE)
#Suggested range for Y is:
cat("Y Range: ", x_range, "mm")
z_range <- range(diamonds_data$z, na.rm = TRUE)
#Suggested range for Z is:
cat("Z Range:", z_range, "mm")
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range:", price_range, "$")
carat_range <- range(diamonds_data$carat, na.rm = TRUE)
cat("Carat Range:", carat_range)
x_range <- range(diamonds_data$x, na.rm = TRUE)
cat("X Range:", x_range, "mm")
y_range <- range(diamonds_data$y, na.rm = TRUE)
#Suggested range for Y is:
cat("Y Range: ", x_range, "mm")
z_range <- range(diamonds_data$z, na.rm = TRUE)
#Suggested range for Z is:
cat("Z Range:", z_range, "mm")
table_range <- range(diamonds_data$table, na.rm = TRUE)
#Suggested range for Z is:
cat("Table Range:", table_range)
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range:", price_range, "$")
carat_range <- range(diamonds_data$carat, na.rm = TRUE)
cat("Carat Range:", carat_range)
x_range <- range(diamonds_data$x, na.rm = TRUE)
cat("X Range:", x_range, "mm")
y_range <- range(diamonds_data$y, na.rm = TRUE)
#Suggested range for Y is:
cat("Y Range: ", x_range, "mm")
z_range <- range(diamonds_data$z, na.rm = TRUE)
#Suggested range for Z is:
cat("Z Range:", z_range, "mm")
table_range <- range(diamonds_data$table, na.rm = TRUE)
cat("Table Range:", table_range)
depth_range <- range(diamonds_data$depth, na.rm = TRUE)
#Suggested range for Z is:
cat("Depth Range:", depth_range)
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range:", price_range, "$")
carat_range <- range(diamonds_data$carat, na.rm = TRUE)
cat("Carat Range:", carat_range)
x_range <- range(diamonds_data$x, na.rm = TRUE)
cat("X Range:", x_range, "mm")
y_range <- range(diamonds_data$y, na.rm = TRUE)
#Suggested range for Y is:
cat("Y Range: ", x_range, "mm")
z_range <- range(diamonds_data$z, na.rm = TRUE)
#Suggested range for Z is:
cat("Z Range:", z_range, "mm")
table_range <- range(diamonds_data$table, na.rm = TRUE)
cat("Table Range:", table_range)
depth_range <- range(diamonds_data$depth, na.rm = TRUE)
cat("Depth Range:", depth_range)
View(diamonds_data)
View(diamonds_data)
levels <- unique(diamonds_data$cut)
num_levels <- length(levels)
levels <- unique(diamonds_data$cut)
print(levels)
num_levels <- length(levels)
levels <- unique(diamonds_data$cut)
num_levels <- length(levels)
print(levels)
print(num_levels)
levels <- unique(diamonds_data$cut)
num_levels <- length(levels)
print(levels)
cat("Number of Levels: ", num_levels)
install.packages("dplyr")
library(dplyr)
library(dplyr, warn.conflicts = FALSE)
library(dplyr, warn.conflicts = FALSE)
summarise_all(diamonds_data)
library(dplyr, warn.conflicts = FALSE)
summarise_if(diamonds_data, is.numeric, funs(n(), mean, median))
library(dplyr, warn.conflicts = FALSE)
summarise_if(diamonds_data, funs(n(), mean, median))
library(dplyr, warn.conflicts = FALSE)
#summarise_if(diamonds_data, is.numeric, funs(n(), mean, median))
summary(diamonds_data)
library(dplyr, warn.conflicts = FALSE)
summarise_if(diamonds_data, is.numeric, funs(n(), mean, median, min, max))
summary(diamonds_data)
library(dplyr, warn.conflicts = FALSE)
summarise_if(diamonds_data, is.numeric, funs(n(), mean, median, min, max))
summary(diamonds_data$price)
library(dplyr, warn.conflicts = FALSE)
summarise_if(diamonds_data, is.numeric, funs(n(), mean, median, min, max))
library(dplyr, warn.conflicts = FALSE)
summarise_if(diamonds_data, is.numeric, funs(n(), mean, median, min, max))
library(ggplot2)
diamonds_data <- diamonds
price_range <- range(diamonds_data$price, na.rm = TRUE)
cat("Price Range:", price_range, "$")
carat_range <- range(diamonds_data$carat, na.rm = TRUE)
cat("Carat Range:", carat_range)
x_range <- range(diamonds_data$x, na.rm = TRUE)
cat("X Range:", x_range, "mm")
y_range <- range(diamonds_data$y, na.rm = TRUE)
#Suggested range for Y is:
cat("Y Range: ", x_range, "mm")
z_range <- range(diamonds_data$z, na.rm = TRUE)
#Suggested range for Z is:
cat("Z Range:", z_range, "mm")
table_range <- range(diamonds_data$table, na.rm = TRUE)
cat("Table Range:", table_range)
depth_range <- range(diamonds_data$depth, na.rm = TRUE)
cat("Depth Range:", depth_range)
levels <- unique(diamonds_data$cut)
num_levels <- length(levels)
print(levels)
cat("Number of Levels: ", num_levels)
library(dplyr, warn.conflicts = FALSE)
summarise_if(diamonds_data, is.numeric, funs(n(), mean, median))
library(dplyr, warn.conflicts = FALSE)
summarise_if(diamonds_data, is.numeric, funs(n(), mean, median, min, max))
summary(diamonds_data)
library(dplyr, warn.conflicts = FALSE)
#summarise_if(diamonds_data, is.numeric, funs(n(), mean, median, min, max))
summary(diamonds_data)
library(ggplot2)
w1<-table(worms$Vegetation)
knitr::opts_chunk$set(echo = TRUE)
int_a <- 4
int_b <- 2
float_a <- 4.2
float_b <- 6.9
int_a+int_b
int_a*int_b
int_a/int_b
int_a%%int_b
int_a^int_b
char_c <- "John"
logic_d <- "FALSE" # logic_d <- F
logic_e <- "TRUE" # logic_e <- T
vector_f <- c(2,2,2,1,4,5,3,2,4,4,3)
int_a * vector_f
seq_x <- seq(1:20)
seq_y <- seq(21:40)
data_frame<-as.data.frame(cbind(seq_x,seq_y)) # this is coercion (http://people.brunel.ac.uk/~csstssd/itr/ItR_1_Objects.html#Coercion)
data_frame
colnames(data_frame) <- c("X","Y")
data_frame
data_frame$x_plus_y <- data_frame$X +data_frame$Y
data_frame
# Can you spot the difference between line 73 and 74?
data_frame$iseven <- ifelse(data_frame$X%%2==0,"TRUE","FALSE")
data_frame$isodd <- ifelse(data_frame$X%%3==0,TRUE,FALSE)
data_frame
add_function <- function(a,b){
a <- a*a
return(a+b)
}
add_function(90,80)
library(ggplot2,gridExtra)
#this line below reads the csv straight into a data frame called worms
worms <- read.csv("data/worms.csv")
#this line below prints the head (or top) of the data frame
head(worms,n=10)
table(worms$Damp, worms$Vegetation)
table(worms$Vegetation)
frequency_vegitation <- table(worms$Vegetation)
barplot(table(worms$Vegetation))
barplot(worms$Soil.pH)
hist(worms$Soil.pH)
#head(worms)
ggplot(data=worms)+geom_point(aes(x=Area,y=Soil.pH))
ggplot(worms)+ geom_bar(aes(x=Vegetation), fill="blue")
ggplot(worms)+ geom_bar(aes(x=Vegetation), fill="blue") +
labs(title = "Vegetation from the Worms data") +
scale_y_continuous(name="Frequency", breaks=c(0,5,10)) +
theme_dark()
w1<-table(worms$Vegetation)
w2<-as.data.frame(w1)
#w2
colnames(w2)<-c("Vegetation","Frequency")
ggplot(w2, aes(x="", y=Frequency, fill=Vegetation))+geom_bar(width=1, stat = "identity") +coord_polar("y", start = 0) +labs(title="Pie Chart for the Vegeation from the Worms data")
data_vector <-c(4,7,2,5,6,2)
mean(data_vector)
median(data_vector)
freq.table<-table(data_vector)
freq.table<-as.data.frame(freq.table) # what has happened here?
sorted.freq.table<-freq.table[order(-freq.table$Freq),]
head(sorted.freq.table, n=1)
#Uncomment the line below if you do not have the 'modeest' package
#install.packages("modeest")
library(modeest)
mfv(data_vector,method = "mfv")
grade.point<-c(13,16,12)
credit<-c(15,15,30)
weighted.mean(grade.point, credit)
range(data_vector)
IQR(data_vector)
quantile(data_vector, c(0.25,0.75))
sd(data_vector)
var(data_vector)
summary(data_vector)
summary(worms$Worm.density)
head(sort(worms$Worm.density, decreasing = F))
# use this chunk of code to try
hist(worms$Worm.density,xlab="Density",ylab="Count",main="Distribution of Density")
# histogram worms
ggplot(worms, aes(x=Worm.density)) +
geom_histogram(fill="blue") +
labs(title="Histogram of Worm Density") +
scale_x_continuous(name="Worm Density", breaks = c(0,1,2,3,4,5,6,7,8,9)) +
theme_bw()
#box plot
ggplot(worms, aes(x=Worm.density, y=Damp)) +
geom_boxplot(fill="steelblue2") +
theme_classic() +
labs(title="Box Plot of Worm Density by Damp") +
coord_flip()
library(ggplot2)
ggplot(diamonds_data) + geom_bar(aes(color))
library(ggplot2)
ggplot(diamonds_data) + geom_bar(aes(color), fill="Black")
library(ggplot2)
ggplot(diamonds_data) + geom_bar(aes(color), fill="Yellow")
library(ggplot2)
ggplot(diamonds_data) + geom_bar(aes(color), fill="Orange") + labs(title = "Colors from the diamonds data")
library(ggplot2)
ggplot(diamonds_data) + geom_bar(aes(color), fill="Orange") + labs(title = "Colors from the diamonds data")
ggplot(diamonds_data) +geom_histogram(aes(cut), fill="Orange") + labs(title="Cuts from the diamond data")
ggplot(diamonds_data) +geom_histogram(aes(carat), fill="Orange") + labs(title="Cuts from the diamond data")
ggplot(diamonds_data) +geom_histogram(aes(carat), fill="Orange") + labs(title="Range of carats from the diamond data") + scale_x_continuous(name = "Range", breaks = c(0,1,2,3))
ggplot(diamonds_data) +geom_histogram(aes(carat), fill="Orange") + labs(title="Range of carats from the diamond data") + scale_x_continuous(name = "Range", breaks = c(0,1,2,3)) + geom_col(width = 1)
ggplot(diamonds_data) +geom_histogram(aes(carat), fill="Orange") + labs(title="Range of carats from the diamond data") + scale_x_continuous(name = "Range", breaks = c(0,1,2,3))
